[
  {
    "id": 1,
    "title": "OSS의 동향을 파악한 구현 정책",
    "description": "■ 개요\n최근 Android 어플리케이션 개발에 어떤 라이브러리가 존재하는지 알아 두는 것은 필수라고 해도 과언이 아닐 것입니다.\n그러나 처음 Android 앱 개발 문화에 접해 보면 업계에서 어떤 것이 표준으로 되어있는지\n모두가 무엇에 주목하고 있는지를 아는 데 조금 경험이 필요합니다.\n대표적인 것을 중심으로 개인적으로 지금부터 만든다고하면 이런 느낌으로 할까라는 이야기를 해보려 합니다.\n\n■ 대상자\nAndroid 초급 ~ 중급\n\n■ 이야기\n최소한 알아야 할 각 라이브러리의 장단점을 간단하게 설명합니다.\n또한 마지막으로, 자신이라면 이렇게 한다! 같은 것도 모아서 말씀 드리고자 합니다.\n- 개발 환경\n- Language (Java8, Kotlin)\nJava8에 근접한 것을 실현하기 위한 라이브러리 (Lightweight-Stream-API를 Retrolambda, ThreeTenABP)\n- Support Library (AppCompat, Design, Annotations, RecyclerView ... etc)\n- DataBinding\n- Network (Volley, Retrofit OkHttp ... etc)\n- Serialization (GSON, ProtoBuf)\n- Image Loader (Picasso, Glide, Fresco ... etc)\n- Effect (GPUImage ... etc)\n- DI (ButterKnife, Dagger, RoboGuice)\n- FRP (RxJava, RxAndroid, RxLifecycle ... etc)\n- DB / ORM (Realm, ActiveAndroid, RxPreferences, Sqlbrite. ..etc)\n- Pub / Sub (Otto, EventBus ... etc)\n- UI (ObservableScrollview, Calligraphy ... etc)\n- Debug (Crashlytics, Timber, Hugo, Steho, LeakCanary, Takt .. .etc)",
    "speaker": {
      "id": 1,
      "name": "wasabeef",
      "image_url": "https://pbs.twimg.com/profile_images/427481863343452160/i-G-x-Gw.jpeg",
      "twitter_name": "wasabeef_jp",
      "github_name": "wasabeef"
    },
    "stime": "2016-02-18 10:00:00",
    "etime": "2016-02-18 11:00:00",
    "category": {
      "id": 1,
      "name": "기조 연설"
    },
    "place": {
      "id": 1,
      "name": "기조 연설 회장"
    },
    "language_id": "ja",
    "slide_url": "https://speakerdeck.com/player/b2127cb508e94238b114512447997aeb",
    "movie_url": "",
    "share_url": ""
  },
  {
    "id": 2,
    "title": "내일부터 사용 가능한 RxJava 자주 나타나는 패턴",
    "description": "cookpad는 RxJava를 도입하고 있는 국내에서 몇 안 되는 기업 중 하나입니다.\n이 세션에서는 실제로 몇 개의 사내 응용 프로그램의 소스 코드에서 Rxjava가 사용되고 있는 곳을 찾아\n자주 나타나는 디자인 패턴을 몇 가지 소개하려 합니다.\n실제 사용 화면을 소개함으로써 RxJava 도입의 이미지를 명확하게 이해하실 수 있으시다면 다행입니다.\n\n대상자 :\n* RxJava 입문자\n* RxJava를 업무에 도입하고 싶지만 조금 망설이시는 분\n\n말할 내용 (예정)\n\n* 자기 소개 (2min)\n* Rxjava에 대해서 (5min)\n* RxJava, RxAndroid에 대해서\n* 이번 슬라이드를 이해하기위한 기초 지식\n* observable, subscriber, subject, subscription 등의 소개\n* 자주 나타나는 패턴 4가지 소개 (15min) [아마도 소개하는 패턴을 바꿉니다\n* 사용하는 샘플 web_api 설명\n* 비동기 - 직렬 처리 (flatMap)\n* 비동기 - 병렬 처리 (combineLatist)\n* combineLatist와 subject의 이용 패턴\n* 조금 복잡한 비동기 - 직렬 처리 (Pair, Tuple, Observable # just)\n*주의해야 할 점 (5min)\n* Observable을 어디에 두는 것이 정답인지 ..\n* trello / rxLifecycle과 AndroidSubscription 의 사용에 대해\n* unit 테스트는 어떻게 하는지\n* 끝",
    "speaker": {
      "id": 2,
      "name": "kazy",
      "image_url": "https://pbs.twimg.com/profile_images/431287539366776832/UqbQidjX.jpeg",
      "twitter_name": "101kaz",
      "github_name": "kazy1991"
    },
    "stime": "2016-02-18 11:30:00",
    "etime": "2016-02-18 12:00:00",
    "category": {
      "id": 2,
      "name": "기타"
    },
    "place": {
      "id": 2,
      "name": "Room A"
    },
    "language_id": "ja",
    "slide_url": "https://www.slideshare.net/slideshow/embed_code/key/Ahb0jhlbUJ8lXU",
    "movie_url": "",
    "share_url": "https://droidkaigi.github.io/2016/timetable.html#session-2016-02-18-11-30-12-00-a"
  },
  {
    "id": 3,
    "title": "Master of Canvas",
    "description": "대상자 :\nCanvas을 이용한 Animation에 관심이있는 중급 개발자\n\n설명 :\nCanvas에서 Path를 사용해 풍부한 Animation을 구현하는 방법에 대한 설명 또한 Illustrator를 사용해서 쉽게 디자인을 Canvas로 구현 하는 방법에 대해 이야기합니다.\n\nPath를 사용한 Animation에서는 Interpolatior의 커스터마이징, 수식 만드는 방법, TypeEvaluator의 커스텀 방법 등 자세하게 설명합니다.\nPath는 API19에서 Path#op 등 편리한 메소드도 추가되는 등, 표현의 폭이 넓어지고 있습니다.\nMaterial 대응의 끝에있는 작은 View의 세세한 이야기​​를합니다.\n\nIllustrator에서 만든 디자인의 Animation 변화를 간단하게 하는 구현과 그때 사용하는 손수 만든 스크립트의 설명합니​​다.\n\n주로 다음 View를 설명하면서 진행하려고 합니다.\nTextMorphingView : https://twitter.com/amyu_san/status/654555982958166016\nWaveSwipeRefreshLayout https : //github.com/recruit-lifestyle/WaveSwipeRefreshLayout\nBeerSwipeRefreshLayout : https://github.com/recruit-lifestyle/BeerSwipeRefresh\nColoringLoading : https://github.com/recruit-lifestyle/ColoringLoading",
    "speaker": {
      "id": 3,
      "name": "Yuki Mima (@amyu_san)",
      "image_url": "https://pbs.twimg.com/profile_images/378800000194224027/5d5d92036fba329fbfc83f06bb2f464f.jpeg",
      "twitter_name": "amyu_san",
      "github_name": "amyu"
    },
    "stime": "2016-02-18 11:30:00",
    "etime": "2016-02-18 12:00:00",
    "category": {
      "id": 3,
      "name": "UI ・ 디자인"
    },
    "place": {
      "id": 3,
      "name": "Room B"
    },
    "language_id": "ja",
    "slide_url": "https://www.slideshare.net/slideshow/embed_code/key/ugJ3ZL8tILVQiu",
    "movie_url": "",
    "share_url": "https://droidkaigi.github.io/2016/timetable.html#session-2016-02-18-11-30-12-00-b"
  },
  {
    "id": 4,
    "title": "TV 용 Android 앱 개발 TIPS와 최신 사정",
    "description": "[요약]\n2015년 Fire TV와 Android TV가 일본에 서비스를 시작하여 TV에서 앱을 이용하는 시나리오가 많아졌습니다. 이미 가지고 계시는 앱을 TV용으로 개발시 해야 하는 수단이나 기능 등을 소개합니다.\n\n아래의 내용 :\nAndroid TV 시장의 최신 사정 소개\nTV 용으로 개발 순서에 대해서\nTV용의 재미있는 기능 소개\n\n[대상자]\n안드로이드 개발 초급 - 중급\n앱 개발 경험이 있으며, TV용으로 연장을 생각하고 있는 분\nTV 시장에 관심이있는 분",
    "speaker": {
      "id": 4,
      "name": "Tkeshi Kobayashi",
      "image_url": "",
      "twitter_name": "",
      "github_name": ""
    },
    "stime": "2016-02-18 11:30:00",
    "etime": "2016-02-18 12:00:00",
    "category": {
      "id": 4,
      "name": "하드웨어"
    },
    "place": {
      "id": 4,
      "name": "Room C"
    },
    "language_id": "ja",
    "slide_url": "http://www.slideshare.net/koba206/droidkaigi2016-tvandroidtips",
    "movie_url": "",
    "share_url": "https://droidkaigi.github.io/2016/timetable.html#session-2016-02-18-11-30-12-00-c"
  },
  {
    "id": 5,
    "title": "Advanced RecyclerView Techniques",
    "description": "Most people are now using Android RecyclerViews in their apps these days, however relatively few are using them to their full potential. The ItemDecorators and ItemAnimators components of the RecyclerView allow for much more flexibility to our list content then was every possible with ListView. While they have relatively simple APIs, unlocking their full potential can take some time and practice. \nIn this talk we will cover advanced usages of ItemDecorators to make truly unique list compositions. We'll also cover ItemAnimators to showcase how to make your content look great and feel like a polished Material designed application.",
    "speaker": {
      "id": 5,
      "name": "Joshua Jamison",
      "image_url": "",
      "twitter_name": "",
      "github_name": ""
    },
    "stime": "2016-02-18 11:30:00",
    "etime": "2016-02-18 12:00:00",
    "category": {
      "id": 3,
      "name": "UI ・ 디자인"
    },
    "place": {
      "id": 5,
      "name": "Room D"
    },
    "language_id": "en",
    "slide_url": "https://speakerdeck.com/player/a98be0657c764ca592db89a94a81649d",
    "movie_url": "",
    "share_url": "https://droidkaigi.github.io/2016/timetable.html#session-2016-02-18-11-30-12-00-d"
  },
  {
    "id": 6,
    "title": "역사상 가장 빠른 Android",
    "description": "[개요]\nAndroid 애플리케이션을 고속화하기 위한 좋지 않은 노하우 (몰라도 되는 것)을 소개합니다.\nJava 코드, Dalvik 바이트 코드, 기계어, 가상 머신간에 오가는 것으로, 「Java 코드로」 가장 빠른 어플리케이션을 개발하려면 어떻게하면 좋은가? 를 말합니다.\n※ JNI의 이야기는하지 않습니다\n\n[대상자]\nAndroid 개발에 지루해지고 폐인 개발자\n\n[무엇이 새로운가??\n원래 Dalvik 바이트 코드의 이야기조차 언급되는 일은 거의 없습니다만\n이번은 거기에 머무르지않고 ART의 최심부까지 제대로 설명합니다!\n\n[내용 개요]\n1) ART의 구조\n2) 인터프리터, JIT 컴파일러, AOT 컴파일러\n- 각각의 실행 환경은 어떤 경우에 사용되는지?\n3) Dalvik 바이트 코드\n- 바이트 코드의 개요와 빠른 명령, 느린 명령\n- 느린 명령은 어떤 코드로 생성되는지?\n4) 가상 머신에 다이브\n- Java 바이트 코드에서 Dalvik 바이트 코드로\n- Dalvik 바이트 코드에서 AOT 코드에\n- AOT 코드에서 가상 머신에\n- 코드상에서의 보이지 않는 오버헤드를 파악\n5) 초속화 노하우 모음\n- 이런 코드는 의미가 없다!\n- 사실 이런 코드가 빠르다!",
    "speaker": {
      "id": 6,
      "name": "kmt-t",
      "image_url": "https://pbs.twimg.com/profile_images/491133020833710080/QkK7ryK_.png",
      "twitter_name": "kmt_t",
      "github_name": ""
    },
    "stime": "2016-02-18 13:00:00",
    "etime": "2016-02-18 13:50:00",
    "category": {
      "id": 5,
      "name": "플랫폼"
    },
    "place": {
      "id": 2,
      "name": "Room A"
    },
    "language_id": "ja",
    "slide_url": "https://www.slideshare.net/slideshow/embed_code/key/7j1eC1iFXp5VFO",
    "movie_url": "",
    "share_url": "https://droidkaigi.github.io/2016/timetable.html#session-2016-02-18-13-00-13-50-a"
  },
  {
    "id": 7,
    "title": "Android Lint하고 정확성을 배우자",
    "description": "정적 분석 도구 ・ Android Lint는 함부로 빌드를 실패시키는 악역이라고 생각하기 쉽지만, 사실은 Google이 제공 해준 모범 사례의 보고(寶庫)입니다.\n이 세션에서는 Android Lint가 가지는 200 개 이상의 방대한 규칙을 엄선하여, 초심자가 빠지기 쉬운 것을 중심으로 소개하고 있습니다.\n\n왜 그렇게 하면 안 되는가. 어떻게 고치면 좋은가. 고치면 무엇이 좋은가.\n함께 확인하면서 모범 사례를 배우는 것으로 초심자에서 중급자의 계단을 오릅시다.\n\n■ 대상자\n* 아직 Android 프로그래밍의 모범 사례를 모르는 초심자\n* Android 어플리케이션의 품질을 나타내는 지표를 원하는 품질담당자\n\n■ 이야기하는 내용\n\n* 초심자가 하기 쉬운 실수\n- LinearLayout에 정렬한 View가 표시되지 않는 이유는?\n- FragmentTransaction의 commit() 호출을 잊지 않았습니까?\n- SharedPreference의 commit() 호출을 잊지 않았습니까?\n- Toast의 show() 호출을 잊지 않았습니까?\n- 메모리 많이 사용하는 것들의 recycle 호출을 잊지 않았습니까?\n- OK 버튼을 왼쪽에 둬도 괜찮은 것은 초등학생까지예요?\n- 사용자가 보는 텍스트를 레이아웃에 직접 작성했다 ...?\n* 더 위를 목표로하는 사람을 위해\n- 그쪽 ContentProvider, 죄다 보이는데요?\n- EditText에 inputType과 hint를 지정하고 있나요?\n- 아이콘의 색상과 크기, 그걸로 괜찮습니까?\n- 같은 아이콘이 다른 이름으로 여러개 있습니다만 낭비 아닙니까?\n- Ellipsis (...), 설마 마침표로 적지 않았습니까?\n\n(내용은 변경될 수 있습니다)",
    "speaker": {
      "id": 7,
      "name": "中川幸哉 (@Nkzn)",
      "image_url": "https://pbs.twimg.com/profile_images/628405519447764992/kGVNBAVU.png",
      "twitter_name": "Nkzn",
      "github_name": "Nkzn"
    },
    "stime": "2016-02-18 13:00:00",
    "etime": "2016-02-18 13:50:00",
    "category": {
      "id": 6,
      "name": "개발 환경 ・ 도구"
    },
    "place": {
      "id": 3,
      "name": "Room B"
    },
    "language_id": "ja",
    "slide_url": "https://www.slideshare.net/slideshow/embed_code/key/hG84lSXDVf0BC",
    "movie_url": "",
    "share_url": "https://droidkaigi.github.io/2016/timetable.html#session-2016-02-18-13-00-13-50-b"
  },
  {
    "id": 8,
    "title": "Go Mobile에서 Android 어플리케이션 개발",
    "description": "[대상]\nAndroid 중급자 ~\nGo 초급자 ~\n\n[개요]\nGo Mobile은 Google Go 팀이 서브 프로젝트로 구현을 추진하고 있다 Go에서 Android이나 iOS 앱을 만들기위한 라이브러리 · 툴입니다.\n\nGo Mobile로 작성된 앱은 소수이지만, Go 팀이 실제로 Ivy라는 앱을 출시했습니다.\n참고 : https://play.google.com/store/apps/details? id = org.golang.ivy\n\n또한 발표자도 실제로 Go Mobile로 간단한 앱을 만들어 출시한 경험이 있습니다.\n참고 : https://play.google.com/store/apps/details? id = net.hinoichi.gofun\n\n아직 실험 단계의 기술이지만, 앞으로가 매우 기대되는 기술입니다.\nGo Mobile에서는 Go 풍부한 표준 패키지가 대부분 사용할 수 있으므로 HTTP 서버나 이미지 처리 등 매우 다양한 처리를 쉽게 작성할 수 있습니다.\n또한 Go로 작성된 많은 타사 라이브러리도 사용할 수 있습니다. 예를 들어, goproxy을 사용하면 Android 앱에 프록시 서버를 쉽게 만들 수 있습니다.\n\n일본어의 정보는 아직 적지만 제가 Go Mobile 소스 코드와 문서, 해외 컨퍼런스 발표 자료 등에서 조사한 내용을 정리하여 무엇을 할 수 있는지, 어떻게 구현하는지에 대해서 Go 초심자도 알 수 있도록 설명합니다.\n\n예를 들어, Go Mobile에서는 다음의 두 가지 개발 방법이 있지만, 각각의 개요를 설명하고 각각 어떤 장점이 어떻게 사용될 수 있는지를 이야기를 할 예정입니다.\n\n■ 네이티브 앱\n모든 Go에서 쓰는 방법입니다.\nUI도 모든 Go로 작성하므로 게임 등의 개발에 적합합니다.\n참고 : https://github.com/golang/go/wiki/Mobile#native-applications\n\n■ SDK 앱\nJava에서 JNI를 통해 Go로 작성된 SDK를 호출하는 방법입니다.\nGo의 강점을 살린 부분은 Go로 쓰고 Android API를 호출 부분은 Java로 쓰는 것을 가정합니다.\n참고 : https://github.com/golang/go/wiki/Mobile#sdk-applications-and-generating-bindings\n\n또한 Go는 크로스 컴파일이 가능하므로 Linux / ARM 용으로 빌드하면, 쉽게 adb shell상에서 움직이는 명령어를 만들 수 있습니다. 이러한 평소의 Android 앱 개발에 사용 가능한 Go를 사용한 TIPS에 대해서도 소개 하고 싶습니다.\n\n또한 Android 개발자의 이야기를 할 예정이므로 Go에 대해 많이 알지 못해도 상관없습니다.\n\n[참고]\nGo Mobile : https://github.com/golang/mobile\nGo만으로 Android 어플리케이션을 만든다 (발표자 기사) : http://klabgames.tech.blog.jp.klab.com/archives/1034818110.html\n\n[발표자 정보]\nGo Conference 운영을 하고 있습니다. Go 경력 4 ~ 5 년 정도입니다.\n업무에서는 모바일 온라인 게임 (스마트폰 게임) 개발 클라이언트 사이드를 담당하고 있습니다.",
    "speaker": {
      "id": 8,
      "name": "tenntenn",
      "image_url": "https://pbs.twimg.com/profile_images/592343163492126720/RlOMqlbS.png",
      "twitter_name": "tenntenn",
      "github_name": "tenntenn"
    },
    "stime": "2016-02-18 13:00:00",
    "etime": "2016-02-18 13:50:00",
    "category": {
      "id": 6,
      "name": "개발 환경 ・ 도구"
    },
    "place": {
      "id": 4,
      "name": "Room C"
    },
    "language_id": "ja",
    "slide_url": "https://www.slideshare.net/slideshow/embed_code/key/avaxsZrDKhAmax",
    "movie_url": "",
    "share_url": "https://droidkaigi.github.io/2016/timetable.html#session-2016-02-18-13-00-13-50-c"
  },
  {
    "id": 9,
    "title": "Fragments Why, How, and What For?",
    "description": "This talk will cover how Fragments work in detail by comparing and contrasting them to something we know well, Activities. In it, I will also cover examples and use cases. Fragments: Why, How, and What For? is targeted toward developers who may not have had a lot of experience using Fragments, and those who want to understand them better.\n\nWhy? - Why did Google introduce Fragments? Aren’t Activities enough?\nHow? - How do Fragments work? \nWhat For? - Example and use cases highlighting Fragment reuse, single pane vs multi-pane, ViewPager, NavigationDrawer and DialogFragment.",
    "speaker": {
      "id": 9,
      "name": "Brenda Cook",
      "image_url": "https://pbs.twimg.com/profile_images/607908510303526914/0ewn2oqj.jpg",
      "twitter_name": "kenodoggy",
      "github_name": "kenodoggy"
    },
    "stime": "2016-02-18 13:00:00",
    "etime": "2016-02-18 13:50:00",
    "category": {
      "id": 5,
      "name": "플랫폼"
    },
    "place": {
      "id": 5,
      "name": "Room D"
    },
    "language_id": "en",
    "slide_url": "https://speakerdeck.com/player/732d71403b174583b831a7615d65eaea",
    "movie_url": "",
    "share_url": "https://droidkaigi.github.io/2016/timetable.html#session-2016-02-18-13-00-13-50-d"
  },
  {
    "id": 10,
    "title": "제가 테스트 쓰라고 말하는 아저씨가 된 경위와 그 과정에서 한 일",
    "description": "[개요]\n업무에서 Android 어플리케이션 개발을 하고으면 아무래도 납기를 우선시해버려서, 테스트 코드를 뒷전으로 하기 쉽습니다. 원래 적절히 테스트 코드를 작성하기 위해서는 Testability가 높은 설계가 되어있어야 합니다만, 납기를 우선시한 나머지 설계가 소홀히되어 버리는 경우도 많아, 나중에 테스트 코드를 쓰려고 생각해도 생각처럼 쓸 수 없는 상태에 빠져 버립니다. 일단 이러한 상태에 빠지면 이후의 개발에도 큰 영향을 미칩니다. 테스트 코드가 없어도 의지로 유지 보수는 가능하지만, 앱 기능이 많아지면 의지로 유지 관리는 어려워집니다. 본 발표에서는 어떤 프로젝트를 예로 들어 테스트 코드가 전혀 없이 의지로 관리하는 상태에서 어떻게 Testability가 높은 설계로 변경, 어떤 테스트 Framework를 도입하고, 어떻게 팀 전원이 테스트를 작성하는 문화를 만들었는지를 말씀 드리고자 합니다.\n\nAndroid specific :\n실제 Android 어플리케이션 개발 프로젝트의 예를 바탕으로 어떻게 테스트를 도입한 것인지\n\nExpertise :\n신규 애플리케이션 개발에서 테스트를 도입하는 사례는 자주 듣고 있지만, 테스트 코드가 전혀 없는 기존 어플리케이션에 어떻게 테스트를 도입하느냐는 부분은 별로 알려져지지 않은 점\n\nInnovation :\n테스트 코드가 없는 기존 어플리케이션에 테스트를 도입하기 위해서는 기존 코드와의 공존, 영향 범위의 고려, 신규 애플리케이션에 대한 테스트 도입보다 허들이 높은 것으로 점\n\n[대상자]\n· Android 어플리케이션 개발 중급자\n· 기능 개발은 대충 할 수 있지만, 테스트 코드를 거의 쓴 적이 없는 사람\n· 소속 프로젝트에 테스트 코드가 전혀없어 괴로운 사람\n\n[발표 내용]\n테스트 코드가 없으면 어떤 피해가 발생하는지\n테스트 방법, 테스트 프레임워크의 설명\nTestability가 높은 설계란\nTestability가 낮은 설계에서 높은 설계로 변경하기 위해서 한 일\n팀 모두가 테스트를 작성하는 문화를 만들기 위해 한 일\n테스트 쓰라고 한 아저씨의 그 후",
    "speaker": {
      "id": 10,
      "name": "yuyakaido",
      "image_url": "https://pbs.twimg.com/profile_images/2882190820/d243e16b1207b4287fa5c13f5a76e4ec.png",
      "twitter_name": "yuyakaido",
      "github_name": "yuyakaido"
    },
    "stime": "2016-02-18 14:00:00",
    "etime": "2016-02-18 14:50:00",
    "category": {
      "id": 7,
      "name": "유지 보수"
    },
    "place": {
      "id": 2,
      "name": "Room A"
    },
    "language_id": "ja",
    "slide_url": "https://speakerdeck.com/player/2f64526f0b364719b73c37513aaacecc",
    "movie_url": "",
    "share_url": "https://droidkaigi.github.io/2016/timetable.html#session-2016-02-18-14-00-14-50-a"
  },
  {
    "id": 11,
    "title": "Android Dev Tools Knowledge",
    "description": "대상자 :\nAndroid 개발하는 데 유용한 도구 및 명령어, 라이브러리를 알고 싶은 사람\n· 초심자도 사용할 수 있는 것도 다수\n일부 움직임을 이해하는 데 배경 지식이 필요할 수도 있지만 사용하는데 있어서는 초심자도 OK\n도구를 사용하여 더욱 개발 효율을 올리고 싶은 중급자에게도 추천\n\n개요 :\n최근 Android Studio 및 Gradle의 등장으로 표준 개발 환경이 나날이 향상되고 있습니다.\nAndroid 개발을 효율적으로 하는데 필수적인 개발자 도구도 많이 있습니다.\n\n그런 개발에 유용한 개발자 도구, 명령어, 라이브러리 등의 지식을 남김없이 소개하고 싶습니다.\n실제로 도구 등을 사용하면서 소개하는 부분도 있습니다. (연구로서 바로 곁에서 움직여보고 싶은 사람용으로도 간단한 것)\nAndroid Sutdio와 Plugin만으로는 부족! 한 분들을 위해, 더 깊이 Android를 이해하는데 있어서 도움이 될 것들도 소개합니다.\n이를 아는 것으로, 지금 이상으로 개발 효율성 향상, Android 즐거움 · 깊이를 알아주시는 것으로 기쁩니다.\n\n구체적으로는 다음과 같은 것을 가정하고 있습니다.\n* 편리한 명령어 (adb, systrace.adb 관련 다수) ※ 1\n* Android Studio Plugin\n* Gradle Plugin\n* 디버깅에 유용한 라이브러리\n* 기타 개발에 유용한 도구\n\n※ 이 세션은 ADT (Android Developer Tools) 에 해당하는 것은 아닙니다.\n* This session is not about ADT (Android Developer Tools)\n\n※ 1 참고 https://github.com/operando/Android-Command-Note",
    "speaker": {
      "id": 11,
      "name": "Shinobu Okano(@operandoOS)",
      "image_url": "https://pbs.twimg.com/profile_images/2769959234/6e50270293d9b3196223e64c467f3e53.jpeg",
      "twitter_name": "operandoOS",
      "github_name": "operando"
    },
    "stime": "2016-02-18 14:00:00",
    "etime": "2016-02-18 14:50:00",
    "category": {
      "id": 6,
      "name": "개발 환경 ・ 도구"
    },
    "place": {
      "id": 3,
      "name": "Room B"
    },
    "language_id": "ja",
    "slide_url": "https://www.slideshare.net/slideshow/embed_code/key/Iave17dGTLRBk9",
    "movie_url": "",
    "share_url": "https://droidkaigi.github.io/2016/timetable.html#session-2016-02-18-14-00-14-50-b"
  },
  {
    "id": 12,
    "title": "Advanced Android Espresso",
    "description": "Do you test? It’s okay if you don’t - historically the tools had not been stellar. But they have gotten much better, and I am going to show you my favorite, instrumentation testing with Espresso. \n\nIn this talk you will learn: \n* The basic structure of an Espresso test (Matcher, ViewAction, ViewAssertion) \n* Combining matchers such as withParent, isAssignableFrom to pinpoint your view \n* onData and RecyclerViewActions to test ListView and RecyclerView \n* Custom ViewAction and ViewAssertion \n* Using Dagger and Mockito to write repeatable tests \n\nBy the end of the talk you will be itching to write some tests yourself!",
    "speaker": {
      "id": 12,
      "name": "Chiu-Ki Chan",
      "image_url": "https://pbs.twimg.com/profile_images/439937760703422464/jII8qYTL.png",
      "twitter_name": "chiuki",
      "github_name": "chiuki"
    },
    "stime": "2016-02-18 14:00:00",
    "etime": "2016-02-18 14:50:00",
    "category": {
      "id": 7,
      "name": "유지 보수"
    },
    "place": {
      "id": 5,
      "name": "Room D"
    },
    "language_id": "en",
    "slide_url": "http://chiuki.github.io/advanced-android-espresso/#/",
    "movie_url": "",
    "share_url": "https://droidkaigi.github.io/2016/timetable.html#session-2016-02-18-14-00-14-50-d"
  },
  {
    "id": 13,
    "title": "빠르게 출시하기 위한 Android 어플리케이션 디자인",
    "description": "디자이너와 엔지니어 사이의 상호 작용에 비효율을 느끼고 있는 디자이너 / 엔지니어분들이 많지 않으신가요? 올여름에 출시 한 어플 'Sync' http://sync.wantedly.com의 개발에서는 디자이너도 코드를 쓰면서 빠르게 수준 높은 앱 출시를 목표로 했습니다. 그 사례를 중심으로 더욱 효율적인 연계를 위해 디자이너는 어떻게 해야 하는가? 전해드리고 싶습니다.\n\n## 항목\n- 디자이너는 코드를 작성해야 하는가?\n- Matelial Design을 사용하여 효율 올리기\n- style · theme와 디자인\n- 엔지니어가 디자이너에게 가르쳐 주셨으면 하는 것\n등\n\n## 대상\n- 디자이너와의 상호 작용을 더 효율적으로 원하는 엔지니어\n- 디자인의 재현도를 높이는데 있어서 어려움을 겪고 있는 디자이너\n- 디자이너가 앱 개발에 생각하고 있는 것을 알고 싶은 엔지니어",
    "speaker": {
      "id": 13,
      "name": "Naoki Aoyama",
      "image_url": "https://pbs.twimg.com/profile_images/780424528/yan.png",
      "twitter_name": "yanAoym",
      "github_name": "yanAoym"
    },
    "stime": "2016-02-18 15:10:00",
    "etime": "2016-02-18 15:40:00",
    "category": {
      "id": 3,
      "name": "UI ・ 디자인"
    },
    "place": {
      "id": 2,
      "name": "Room A"
    },
    "language_id": "ja",
    "slide_url": "https://www.slideshare.net/slideshow/embed_code/key/tdrJqeaLBcw5YA",
    "movie_url": "",
    "share_url": "https://droidkaigi.github.io/2016/timetable.html#session-2016-02-18-15-10-15-40-a"
  },
  {
    "id": 14,
    "title": "Dagger2와 Realm을 이용한 현대적인 개발",
    "description": "Android에는 일반적으로 JVM 어플리케이션에는 없는 Activity와 Fragment 등 독자적인 세계관이 있으므로, Android가 가지는 특성을 깊게 생각하지 않고 구현을 하면 바로 복잡한 코드가 되어 버립니다.\n\n또한 최근에는 어플리케이션 개발에 대한 수요가 증가하고 또한 그 규모도 커지고 있습니다. 기능이 늘어나고 코드는 복잡해질 수 있습니다.\n\n이 부분을 애매하게 한 채, 개발을 계속하고 어플리케이션이 비대해지면 복잡한 코드를 운용하지 않으면 안 되는 위험이 커지고, 기능 추가도 어려운 환경이 되어 버립니다.\n\n복잡한 코드를 만들지 않기 위해서는 의존성을 제거하고 테스트할 수 있는 코드를 작성하는 것이 철칙입니다. 게다가 Activity 재생성 등 Android 프레임워크의 움직임에 잘 대응해야 합니다.\n\n이 문제에 대해 스스로 해결하지 못하는 것은 아닙니다. 그러나 다행히도 2015년 현재에는 Android에서 사용할 수 있는 유용한 라이브러리가 많이 준비되어 있습니다. 우리는 다양한 라이브러리를 조사하고 그 결과 'Dagger2' 'Realm'을 결합하는 것으로 프레임워크와 잘 어우러져, 견고해지고 의존성을 가능한 한 배제하고 테스트할 수 있는 제품의 개발 방법을 고안했습니다 했다.\n\n어플리케이션 개발에서 또 잊어서는 안되는 것이 서버측과의 균형입니다. 특히 서버 측을 모두 새로 만들 때 항상 API의 설계가 클라이언트 어플리케이션보다 선행구현되어 있는 것은 아닙니다.\n\n이 경우 클라이언트 어플리케이션 측에서 작업을 중단한다는 것은 생각할 수 없고, 무엇인가의 대책을 강구 할 필요가 있습니다.\n\n그래서 우리는 stub 서버를 준비하고 Web 측 개발과는 독립된 임시 EndPoint를 준비. 매우 빠른 개발 환경을 제공할 수 있었습니다.\n\n이 세션의 내용이 조금이라도 여러분의 도움이 있으면 다행히 아닐까 생각합니다.",
    "speaker": {
      "id": 14,
      "name": "Ryo Kitamura",
      "image_url": "",
      "twitter_name": "",
      "github_name": ""
    },
    "stime": "2016-02-18 15:10:00",
    "etime": "2016-02-18 15:40:00",
    "category": {
      "id": 8,
      "name": "Android의 최신 동향"
    },
    "place": {
      "id": 3,
      "name": "Room B"
    },
    "language_id": "ja",
    "slide_url": "https://speakerdeck.com/player/2611fd17c59f428eb491335e34a27cab",
    "movie_url": "",
    "share_url": "https://droidkaigi.github.io/2016/timetable.html#session-2016-02-18-15-10-15-40-b"
  },
  {
    "id": 15,
    "title": "Windows 환경에서 효율적인 어플리케이션 개발 방법",
    "description": "▪Windows 환경에서 효율적인 어플리케이션 개발 방법\n○ 【개요】\n최신의 Android 앱 개발의 현장에서는 개발 PC로 Mac이 사용되고 있는 일이 많다고 생각합니다.\n스터디 그룹 등에서 Mac을 가져오는 개발자를 많이 볼 수 있긴 하지만, 실제 개발 현장에서는 아직도 Windows 환경에서 개발하고있는 개발자도 많이 있다고 듣고 있습니다.\n인터넷 블로그나 qiita이나 stackoverflow에 게시된 정보도 전자인 Mac을 사용하는 사람의 정보가 많고, Windows 사용자에게 있어서 Android 어플리케이션 개발의 정보가 충분하지 않은 상황이라고 느끼고 있습니다. 그런 Windows 사용자의 Android 앱 개발시 실패하기 쉬운 점과 어려운 점을 소개함으로써, 빠지기 쉬운 포인트를 피할 수 있고, 개발 효율성을 높이거나 Windows에서도 Mac과 어울리는 개발이 되거나 Mac에서는 할 수 없는 것을 할 수 있는 사례를 소개합니다.\n\n○ 【목차]\n· Android SDK 다운로드, SDK Manager 다운로드 및 Path 설정 등 환경 구축\n· Android Studio 설치 시 포인트\n· Android 단말의 드라이버 설정 모범 사례\n· Android Emulator 활용 시의 설정 방법\n· Git의 이용 방법. Git for windows, sourceTree (GUI) GitHub Desktop, Cygwin 인 ssh, HTTPS 등의 활용 방법\n· Android Studio 키보드 커스터마이징 (Caps-Ctrl, US 배열, 추가 바로 가기 설정)\n· github, bitbucket 등의 이용 시 포인트\n· apktools, dex to java 등의 분석 도구 활용 방법\n· Windows 특유의 문제에 대한 해결책",
    "speaker": {
      "id": 15,
      "name": "tarotaro",
      "image_url": "https://pbs.twimg.com/profile_images/1610666375/icon.png",
      "twitter_name": "tarotaro4",
      "github_name": ""
    },
    "stime": "2016-02-18 15:10:00",
    "etime": "2016-02-18 15:40:00",
    "category": {
      "id": 6,
      "name": "개발 환경 ・ 도구"
    },
    "place": {
      "id": 4,
      "name": "Room C"
    },
    "language_id": "ja",
    "slide_url": "https://www.slideshare.net/slideshow/embed_code/key/8n9D5g4J5Z32TJ",
    "movie_url": "",
    "share_url": "https://droidkaigi.github.io/2016/timetable.html#session-2016-02-18-15-10-15-40-c"
  },
  {
    "id": 16,
    "title": "Instant Run을 실현하는 구조",
    "description": "Android Studio 2.0의 중심이 되는 새로운 기능 Instant Run은 어떻게 실현하고 있는지, IDE는 어떻게 Android 애플리케이션을 패키지, 설치, 디버깅하고 있느냐는 측면에서 이야기합니다. Instant Run 자체의 구조는 11월 시점에서는 미공개이므로 2월까지 미공개일 경우, 기존의 유사한 기술을 바탕으로 추측으로 이야기합니다.\n\n대상자 : 프레임워크, 개발 도구의 구조에 관심 있는 개발자",
    "speaker": {
      "id": 16,
      "name": "Atsushi Eno",
      "image_url": "https://pbs.twimg.com/profile_images/633074634435379200/qJu6ECTX.jpg",
      "twitter_name": "atsushieno",
      "github_name": "atsushieno"
    },
    "stime": "2016-02-18 15:10:00",
    "etime": "2016-02-18 15:40:00",
    "category": {
      "id": 6,
      "name": "개발 환경 ・ 도구"
    },
    "place": {
      "id": 5,
      "name": "Roo D"
    },
    "language_id": "ja",
    "slide_url": "https://speakerdeck.com/player/a1a8aa45f862421d931bb766f5858dec",
    "movie_url": "",
    "share_url": "https://droidkaigi.github.io/2016/timetable.html#session-2016-02-18-15-10-15-40-d"
  },
  {
    "id": 17,
    "title": "용도에 맞춘 애니메이션의 구현 방법",
    "description": "【대상자】\nAndroid 앱 개발 초급 ~ 중급\n\n[개요]\nAndroid 버전이 올라가면서 애니메이션의 구조도 상당히 증가했습니다.\n한마디로 애니메이션이라고해도 View의 내부를 움직이는지, View 자체를 움직이는 지\n레이아웃마다 움직이는지 여러가지가 있습니다.\nAndroid 프레임워크는 각각의 구조를 가지고 있습니다만\n기능면에서 중복된 것이나 의존 관계에 있는것이 있고\n이제 구현시에도 어떤 것을 선택해야할지가 어려워지고 있습니다.\n\n본 발표에서는 수많은 애니메이션의 구조 속에서\n어떤 용도에는 어떤 것을 사용해야할지에 대해\n사고와 접근 방식에 대해 이야기합니다.\n\n[키워드]\n- Drawable Animation\n- View Animation\n- Property Animation\n- Transition Animation\n- Actvity / Fragment Transition",
    "speaker": {
      "id": 17,
      "name": "Takeo Sumitomo",
      "image_url": "https://pbs.twimg.com/profile_images/628217025492484096/ppW0QfNn.png",
      "twitter_name": "cattaka_net",
      "github_name": "cattaka"
    },
    "stime": "2016-02-18 15:50:00",
    "etime": "2016-02-18 16:20:00",
    "category": {
      "id": 3,
      "name": "UI ・ 디자인"
    },
    "place": {
      "id": 2,
      "name": "Room A"
    },
    "language_id": "ja",
    "slide_url": "https://www.slideshare.net/slideshow/embed_code/key/lV25KCMJfyOX9m",
    "movie_url": "",
    "share_url": "https://droidkaigi.github.io/2016/timetable.html#session-2016-02-18-15-50-16-20-a"
  },
  {
    "id": 18,
    "title": "Android 절전에 대해서 생각",
    "description": "대상자 : 중급자 (단순히 만드는 단계를 넘어, 좀 더 사용자를 생각하자는 단계에 도달하신 분)\n\n설명 :\nAndroid에서는 지금까지 제조사의 독자적인 것들을 포함 다양한 절전을 위한 기능이 도입됐습니다. Job Scheduler와 Sensor Batching 같은 Android 전체에 도입된 것도 있고, 제조사 독자적인 절전 기능도 있었습니다. 또한, 전력 절감을 위한 설계 지침의 노하우도 있습니다.\n\n그 역사에 따라 Android 6.0에서 도입 된 새로운 절전 기능인 Doze 모드와 App Standby에 대해서 소개합니다.\n\n또 아무래도 그 절전으로 인한 제한이 곤란한 분들을 위해, 회피 · 완화하기 위한 방법에 대해서도 설명합니다.",
    "speaker": {
      "id": 18,
      "name": "Yoshiaki Nakanishi",
      "image_url": "https://pbs.twimg.com/profile_images/933874847/chun_ryo.jpg",
      "twitter_name": "chun_ryo",
      "github_name": "ynakanishi"
    },
    "stime": "2016-02-18 15:50:00",
    "etime": "2016-02-18 16:20:00",
    "category": {
      "id": 8,
      "name": "Android의 최신 동향"
    },
    "place": {
      "id": 3,
      "name": "Room B"
    },
    "language_id": "ja",
    "slide_url": "https://speakerdeck.com/player/c58b6a6646054b3d9b8ef814e437659a",
    "movie_url": "",
    "share_url": "https://droidkaigi.github.io/2016/timetable.html#session-2016-02-18-15-50-16-20-b"
  },
  {
    "id": 19,
    "title": "권한 모델의 과도기에 대응",
    "description": "[개요]\nAndroid6.0에서 새로운 권한 모델 (Runtime Permission)되어, 처음 실행할 때 권한이 필요하거나 나중에 취소가 가능하게 되는 등\n지금까지의 모델과 크게 달라졌습니다.\n그렇지만, 현재 이 새로운 모델의 혜택을 충분히 받는 것은 Android6.0 단말상에서 targetSDKversion=23의 어플리케이션을 움직였을때뿐입니다.\n잠시동안은 6.0 이전 Android가 탑재된 단말기가 많고, 그 대응을 생각해야합니다.\n또한, 크게 모델이 바뀌었기 때문에, Android6.0에 전면적으로 대응하기까지 시간이 걸리는 프로젝트도 예상됩니다.\n이 과도기 동안 Permission 관련 문제를 일으키지 않기 위한 방법에 대해 알려드립니다.\n\n[대상자]\nAndroid 앱 개발 초급 ~ 중급자\n\n[내용]\n-Runtime Permission 대​​해\n-Runtime Permission 모범 사례\n-Android5.1 이전 단말에 대응한 targetSDKVersion=23 어플리케이션 만드는 방법\n-targetSDKVersion=23으로 올릴 수 없는 앱이 Android6.0 단말에서 문제를 일으키지 않게 하는 방법",
    "speaker": {
      "id": 19,
      "name": "aki_sh_7",
      "image_url": "https://pbs.twimg.com/profile_images/633665268430934017/yVu6Wcru.jpg",
      "twitter_name": "aki_sh_7",
      "github_name": ""
    },
    "stime": "2016-02-18 15:50:00",
    "etime": "2016-02-18 16:20:00",
    "category": {
      "id": 7,
      "name": "유지 보수"
    },
    "place": {
      "id": 5,
      "name": "Room D"
    },
    "language_id": "ja",
    "slide_url": "https://www.slideshare.net/slideshow/embed_code/key/echzTfR6rDwePU",
    "movie_url": "",
    "share_url": "https://droidkaigi.github.io/2016/timetable.html#session-2016-02-18-15-50-16-20-d"
  },
  {
    "id": 20,
    "title": "내일 패소하지 않기 위한 보안 코딩",
    "description": "대상자 : Android 어플리케이션 개발자 (특히 아웃소싱하는 분들)\n\n'피고는 원고에게 2262만 3697엔 및 이에 대한 2011년 10월 15일부터 지불이 끝날 때까지 연 6%의 금액을 지불하여라. '\n\n위는 고객의 신용 카드 정보 유출의 원인이 된 수주 시스템 설계 · 제작 · 유지 보수 계약 업체 (피고)에 대해 그 주문 시스템을 이용한 EC 사이트 운영 회사 (원고)에 의한 손해 배상 책임을 인정한 도쿄 지방 재판소의 판결문입니다.\n\n법원은 위탁받은측이 일반적인 공격의 대책을 할 의무를 게을리한 것으로 채무 불이행이라는 판단을했다는 것입니다만, Android 어플리케이션에서도 같은 현상이 발생할 수 있기때문에, 아웃소싱하는 경우 조심하지않으면 안됩니다.\n\n이 세션에서는 같은 비극을 반복하지 않기 위해, Android 어플리케이션의 일반적인 위험의 소개와 위험으로 이어질 취약점을 만들지 않는 보안 코딩 방법에 대해 말씀드리고자 합니다. 물론 SQL 인젝션 대책에 대해서도 이야기 할 예정입니다.\n\n\n이다 : http://www.softic.or.jp/semi/2014/5_141113/op.pdf",
    "speaker": {
      "id": 20,
      "name": "kengoscal",
      "image_url": "https://pbs.twimg.com/profile_images/619114313819688960/F-6mzriO.jpg",
      "twitter_name": "kengoscal",
      "github_name": "ken5scal"
    },
    "stime": "2016-02-18 16:30:00",
    "etime": "2016-02-18 17:00:00",
    "category": {
      "id": 7,
      "name": "유지 보수"
    },
    "place": {
      "id": 2,
      "name": "Room A"
    },
    "language_id": "ja",
    "slide_url": "https://www.slideshare.net/slideshow/embed_code/key/2Sq95Uh3Ig3xmW",
    "movie_url": "",
    "share_url": "https://droidkaigi.github.io/2016/timetable.html#session-2016-02-18-16-30-17-00-a"
  },
  {
    "id": 21,
    "title": "실천! Android Studio 플러그인 개발",
    "description": "Android Studio는 이제 Android 개발에 없어서는 안되는 IDE가 되었습니다. 유용한 플러그인도 풍부하게 공개되어 있습니다만, 그 개발 방법에 대해서는 그다지 내용이 공유되어 있지 않은 것 같습니다. 저도 이전에 플러그인을 개발했을 때 입문 이상의 정보가 적어 고생했습니다.\nhttps://github.com/konifar/android-material-design-icon-generator-plugin\n\n'유용한 플러그인 아이디어가 있어도 어떻게 해야 할지 모르겠다' 라는 Android 개발자에게 나도 만들 수 있을 것 같은데? 라고 느낄 수 있는 이야기를 하겠습니다. 이전에 입문 기사를 썼지만, 이보다 좀 더 실질적인 내용을 언급하고 싶습니다.\nhttp : //qiita.com/konifar/items/c6e23921ffec475907fc\n\n[대상자]\n플러그인에 신세지고있는 사람\n· 만들고 싶은 플러그인이 있는 사람\n· Android Studio를 좋아하는 사람\n\n[내용]\n유형별 만드는 방법 (코드 생성, 화면 표시, 파일 조작 등)\n· 만들고 싶은 플러그인 구현 방법을 어떻게 알아내는지\n· Gradle 프로젝트로 만드는 방법과 CI\n· Kotlin 도입 방법",
    "speaker": {
      "id": 21,
      "name": "konifar",
      "image_url": "https://pbs.twimg.com/profile_images/619379391588511744/V4RrXbvM.jpg",
      "twitter_name": "konifar",
      "github_name": "konifar"
    },
    "stime": "2016-02-18 16:30:00",
    "etime": "2016-02-18 17:00:00",
    "category": {
      "id": 6,
      "name": "개발 환경 ・ 도구"
    },
    "place": {
      "id": 3,
      "name": "Room B"
    },
    "language_id": "ja",
    "slide_url": "https://speakerdeck.com/konifar/shi-jian-android-studiopuraguinkai-fa",
    "movie_url": "",
    "share_url": "https://droidkaigi.github.io/2016/timetable.html#session-2016-02-18-16-30-17-00-b"
  },
  {
    "id": 22,
    "title": "두렵지 않은 gradle에서의 빌드 환경 설정 및 Basel",
    "description": "AndroidStudio에서 사용되는 빌드 시스템 gradle\n기본값을 그대로 사용하고 있지만 사실은 빌드시 더 다양한 gradle에 좋은 느낌으로 쓰고 싶다. 라고 생각하는 분들을 위한 세션입니다\n\n이 세션에서는 gradle를 능숙하게 빌드부터 디버깅용, 프로덕션용 apk 작성, 서명 및 새로운 빌드 시스템으로 주목받고 있는 Bazel로 실제로 빌드를 해본 소감에 대해 말씀드릴 예정입니다",
    "speaker": {
      "id": 22,
      "name": "Tatsuya Shimada",
      "image_url": "https://pbs.twimg.com/profile_images/611831596581130240/vNdSioTF.jpg",
      "twitter_name": "usaganikki",
      "github_name": ""
    },
    "stime": "2016-02-18 16:30:00",
    "etime": "2016-02-18 17:00:00",
    "category": {
      "id": 6,
      "name": "개발 환경 ・ 도구"
    },
    "place": {
      "id": 5,
      "name": "Room D"
    },
    "language_id": "ja",
    "slide_url": "https://www.slideshare.net/slideshow/embed_code/key/LMpcZGdip7KC5u",
    "movie_url": "",
    "share_url": "https://droidkaigi.github.io/2016/timetable.html#session-2016-02-18-16-30-17-00-d"
  },
  {
    "id": 23,
    "title": "Support Library 추천 | Support Library Internal",
    "description": "Android 어플리케이션을 개발하고 있는 분이라면 어느 Support Library를 사용한 적이 있을 것입니다. 각 Support Library를 대략 소개한 후, 자주 묻어보는 질문에 대답하면서 Design 라이브러리의 새로운 기능과 개발의 이면 등도 전하고 싶습니다.",
    "speaker": {
      "id": 23,
      "name": "Yuichi Araki",
      "image_url": "https://avatars2.githubusercontent.com/u/1237536?v=3&s=400.jpg",
      "twitter_name": "yuichi_araki",
      "github_name": "yaraki"
    },
    "stime": "2016-02-19 10:00:00",
    "etime": "2016-02-19 11:00:00",
    "category": {
      "id": 1,
      "name": "기조 연설"
    },
    "place": {
      "id": 1,
      "name": "기조 연설 회장"
    },
    "language_id": "ja",
    "slide_url": "http://yaraki.github.io/slides/droidkaigi2016/",
    "movie_url": "",
    "share_url": ""
  },
  {
    "id": 24,
    "title": "cookpad에서의 Android 엔지니어의 역할과 그 변천",
    "description": "대상자 : 모바일 앱 개발팀에 참여하고 있는 사람, 이끌고있는 사람, 앞으로 팀을 만들려고 생각하는 사람\n\n내가 2013년 10월에 cookpad에 입사했을 당시, 회사의 엔지니어 60명 중에 Android 엔지니어는 나를 포함한 3명이었습니다. 현재는 Android 엔지니어는 10명을 넘어 iOS와 QA를 포함한 모바일 팀 전체는 25명까지 성장했습니다.\n\n내가 입사하기 전에 모바일 엔지니어 0~1명의 시대부터 현재에 이르기까지 어떻게 모바일 팀이 어떤 도전에 직면하고 개선을 했었는를 시간순으로 이야기합니다. 모바일 개발 프로세스의 구축과 개선에 도움이 된다면 좋겠습니다.\n\n- 2012년 4월 하이브리드 앱 시대\n- 2013년 10월 Native화로 Full Scratch\n- 2014년 4월 모바일 퍼스트실 설립\n- 개발 프로세스의 정비\n- 품질 향상\n- 모바일 개발 환경 정비\n- 2015년 1월 모바일 퍼스트실 해산 모바일 기반팀 신설\n- 각 사업부에 흩어져 서비스의 가치를 극대화\n- 모바일 개발 기반 강화\n- 2016년 - 앞으로의 모바일 엔지니어",
    "speaker": {
      "id": 24,
      "name": "sys1yagi",
      "image_url": "https://pbs.twimg.com/profile_images/562623123518787584/st_WXQ8e.png",
      "twitter_name": "sys1yagi",
      "github_name": "sys1yagi"
    },
    "stime": "2016-02-19 11:30:00",
    "etime": "2016-02-19 12:00:00",
    "category": {
      "id": 2,
      "name": "기타"
    },
    "place": {
      "id": 2,
      "name": "Room A"
    },
    "language_id": "ja",
    "slide_url": "https://speakerdeck.com/player/bcf1ec63bc54422ea4795d6cd4ff93de",
    "movie_url": "",
    "share_url": "https://droidkaigi.github.io/2016/timetable.html#session-2016-02-19-11-30-12-00-a"
  },
  {
    "id": 25,
    "title": "다시 태어난 UI Automator를 구사하기",
    "description": "● 개요\n다른 사람이 서명한 어플리케이션도 테스트할 수 있는 귀중한 테스트 도구 'UI Automator' 는 Android Testing Support Library의 일부로서 2015년 3월에 새로 거듭났습니다 (UI Automator 2).\nUI Automator 2에서는 Android Studio와 궁합이 좋아진 데다 사용할 수 있는 API도 배로 늘었습니다.\n\n그러나 공식 문서의 기술량이 적기도 하고, UI Automator 2가 제공하는 기능의 전모가 좀처럼 보이지 않습니다. 특히 UiObject과 UiObject2라는 거의 같은 기능을 제공하는 클래스가 2개의 공존하고 있는 것이, 어려움을 더하고 있습니다.\n\n이 발표에서는 자신이 UI Automator 2를 사용해 본 경험과 UI Automator 2의 구현 코드를 읽고 내용을 바탕으로 다음과 같은 의문을 해결합니다.\n\n- 새롭게 도입된 UiObject2는 UiObject와 무엇이 다른가?\n- 오래된 UiObject는 사용하지 않는 것이 좋은가?\n- UI Automator 2가 되어 새롭게 할 수 있게 된 것은 무엇인가?\n- UI Automator 2의 사용처는 어디인가?\n- UI Automator 2를 사용하여 테스트를 작성할 때 주의해야 할 점은 무엇인가?\n\n● 대상자\n- Android 중급자 ~\n- Android의 Instrumentation Test를 사용해 본 적이 있는 사람\n- Espresso를 활용하여 자동화 된 테스트를 쓰고 있지만, 보다 테스트의 폭을 넓히고 싶은 분\n\n● 3가지 관점에 대해\n\n- Android specific :\nAndroid 표준 테스트 도구인 UI Automator 2에 대한 내용입니다.\n\n- Expertise :\nUI Automator 2에 대해서 간단한 샘플에 대한 정보는 일부 공개되어 있습니다만, 위의 질문에 대답 가능 한 것은 거의 찾을 수 없습니다.\n※ 자신이 ABC 2015 Summer에서 발표한 슬라이드 [1]은 위 질문에 답변 가능한 것이지만, 본 발표는 그것을 더 깊이 파헤치고 새로 얻은 지식을 더한 것입니다.\n\n[1] '테스트 자동화 도구 UI Automator 2.0에서 바뀐 것' https://speakerdeck.com/sumio/notable-changes-in-ui-automator-2-dot-0\n\n- Innovation :\nUI Automator 2를 사용한 테스트 작성방법을 깊이 이해하는 것으로, 다른 사람이 서명한 어플리케이션과 연계하는 UI 테스트 자동화에 대해서 심리적 장벽을 낮출 수 있습니다.",
    "speaker": {
      "id": 25,
      "name": "@sumio_tym (TOYAMA Sumio)",
      "image_url": "https://pbs.twimg.com/profile_images/1564001253/bf.jpg",
      "twitter_name": "sumio_tym",
      "github_name": "sumio"
    },
    "stime": "2016-02-19 11:30:00",
    "etime": "2016-02-19 12:00:00",
    "category": {
      "id": 7,
      "name": "유지 보수"
    },
    "place": {
      "id": 3,
      "name": "Room B"
    },
    "language_id": "ja",
    "slide_url": "https://speakerdeck.com/player/a0bbeb39b9074cb4a678efdffdfa872c",
    "movie_url": "",
    "share_url": "https://droidkaigi.github.io/2016/timetable.html#session-2016-02-19-11-30-12-00-b"
  },
  {
    "id": 26,
    "title": "View into the abyss",
    "description": "Android 어플리케이션의 화면을 구성하는 최소 단위 'View' 에 대해 기초부터 설명합니다.\n보통 XML로 작성하는 View 레이아웃이 실행 시에 어떻게 구성되는지\nHow-to 그치지않고 실제 동작 원리에 관심이 있는 분들을 위한 강연입니다.\n주로 다음의 두 가지 사항에 대해 자세하게 이야기할 예정입니다.\n\nView Tree 레이아웃 구축 및 그리기의 구조\n- onMeasure, onLayout, onDraw\n- requestLayout, invalidate\n- Custom View와 Custom ViewGroup을 만드는 방법\n\nView 성능 최적화\n- 불필요한 재 레이아웃이나 다시 그리기를 피하려면\n- (여유가 있으면) 하드웨어 레이어에 대해서",
    "speaker": {
      "id": 26,
      "name": "Masaki Mori",
      "image_url": "",
      "twitter_name": "",
      "github_name": ""
    },
    "stime": "2016-02-19 11:30:00",
    "etime": "2016-02-19 12:00:00",
    "category": {
      "id": 5,
      "name": "플랫폼"
    },
    "place": {
      "id": 4,
      "name": "Room C"
    },
    "language_id": "ja",
    "slide_url": "",
    "movie_url": "",
    "share_url": "https://droidkaigi.github.io/2016/timetable.html#session-2016-02-19-11-30-12-00-c"
  },
  {
    "id": 27,
    "title": "Annotation Processing in Android",
    "description": "Annotation Processing is an advanced Java technique that can be used in Android for great benefits. In this session you will learn the basic, see some examples and learn to write one yourself with proper unit tests!",
    "speaker": {
      "id": 27,
      "name": "Emanuele Zattin",
      "image_url": "https://pbs.twimg.com/profile_images/378800000371179906/a7d0cc0650810f62c51786b8d889fbf4.png",
      "twitter_name": "emanuelez",
      "github_name": "emanuelez"
    },
    "stime": "2016-02-19 11:30:00",
    "etime": "2016-02-19 12:00:00",
    "category": {
      "id": 5,
      "name": "플랫폼"
    },
    "place": {
      "id": 5,
      "name": "Room D"
    },
    "language_id": "en",
    "slide_url": "https://www.slideshare.net/slideshow/embed_code/key/A7pzaPn7U0rgOR",
    "movie_url": "",
    "share_url": "https://droidkaigi.github.io/2016/timetable.html#session-2016-02-19-11-30-12-00-d"
  },
  {
    "id": 28,
    "title": "Customizing Theme and Style for Material Design",
    "description": "테마와 스타일을 활용할 수 있습니까?\n\n이 세션에서는 먼저 테마 ・ 스타일의 기초를 설명하고 어플리케이션 테마의 올바른 커스터마이징 방법을 소개합니다. 그 후에 상태 바의 투명화 등 새로운 버전에 추가된 기능과 그것들을 버전별로 나누는 지정 방법을 소개합니다. 마지막으로 AppCompat에서 제공하는 Material Design을 실현하기 위한 테마 ・ 스타일을 살펴보겠습니다. AppCompat에서 사용할 수 있는 것은 colorPrimary과 colorAccent뿐만 아닙니다. Widget과 TextAppearance 등 레이아웃 XML로 직접 지정하는데 편리한 것도 여러 가지 준비되어 있습니다. 이러한 정의와 활용 방법을 소개합니다.\n\n\n대상자\n- 테마 ・ 스타일을 어떻게든 사용하는 사람\n- 올바른 커스터마이징 방법을 알고 싶은 사람\n- 새로운 버전에서 추가된 테마 속성을 알고 싶은 사람\n- AppCompat의 스타일을 활용하고자 하는 사람",
    "speaker": {
      "id": 28,
      "name": "Yuki Anzai（yanzm）",
      "image_url": "https://pbs.twimg.com/profile_images/628030087460327424/0oNNWTBN.png",
      "twitter_name": "yanzm",
      "github_name": "yanzm"
    },
    "stime": "2016-02-19 13:00:00",
    "etime": "2016-02-19 13:50:00",
    "category": {
      "id": 3,
      "name": "UI ・ 디자인"
    },
    "place": {
      "id": 2,
      "name": "Room A"
    },
    "language_id": "ja",
    "slide_url": "https://www.slideshare.net/slideshow/embed_code/key/pfRLx8bQCqPPxx",
    "movie_url": "",
    "share_url": "https://droidkaigi.github.io/2016/timetable.html#session-2016-02-19-13-00-13-50-a"
  },
  {
    "id": 29,
    "title": "성능을 추구하는 Android 어플리케이션을 만들려면",
    "description": "대상 : Android 어플리케이션의 개발을 경험하고 있는 분. 특히, 나. 이제 Android 개발은 알고있어라고 생각하는 거기 당신.\n\nAndroid 어플리케이션의 성능을 향상시키는 기술을 다양한 관점에서 포괄적으로 설명한다.\n성능을 추구한 양질의 애플리케이션을 구축하는 단서를 얻을 수 있는 세션.\nTOPIC :\n- Android 어플리케이션의 성능의 기본 원칙에 대해\n- UI의 성능을 향상시키기 위해\n- 메모리의 성능을 향상시키기 위해\n- CPU의 성능을 향상시키기 위해\n- 배터리의 성능을 향상시키기 위해\n- 하드웨어의 성능을 향상시키기 위해",
    "speaker": {
      "id": 29,
      "name": "t.egg",
      "image_url": "",
      "twitter_name": "",
      "github_name": ""
    },
    "stime": "2016-02-19 13:00:00",
    "etime": "2016-02-19 13:50:00",
    "category": {
      "id": 7,
      "name": "유지 보수"
    },
    "place": {
      "id": 3,
      "name": "Room B"
    },
    "language_id": "ja",
    "slide_url": "https://speakerdeck.com/player/b6d9c2bb763f4726b44fd5c85279a5ab",
    "movie_url": "",
    "share_url": "https://droidkaigi.github.io/2016/timetable.html#session-2016-02-19-13-00-13-50-b"
  },
  {
    "id": 30,
    "title": "카메라 어플 첫 걸음",
    "description": "Camera2 API가 출시된 지 대략 1년이 되지만, 콜백 지옥이라고도 할 수 있는 API 설계의 불편함 때문인지, 그다지 보급되고 있는 상황은 아닙니다. 그렇다고 지금부터 Camera API를 이용하는 것은 <del> 뭔가에 진 것 같은</ del> 비추천 API이므로 동작 보장도 어려워집니다.\n\n이 세션에서는 세션, 캡처 등 설계상 중요한 개념을 설명하고 Camera2 API의 불편함을 해소하고 '참고 있었지만, 이것이라면 쓸만하구나' 라고 생각하는 것을 목적으로 Camera2 API를 설명합니다.\n\nAPI을 살펴보면 카메라의 새로운 용도로서 예를 들면 촬영 시 파라매터인 노출을 변화시키면서 연사하는 등을 충족하기 위해 파이프라인이라는 개념이 나옵니다. 이 개념은 성능을 추구하는 설계로서 아주 잘 되어 있으므로 카메라 어플리케이션에 관심이 있는 사람은 물론 비동기 API의 설계 모델로도 참고된다고 생각합니다",
    "speaker": {
      "id": 30,
      "name": "mhidaka",
      "image_url": "https://pbs.twimg.com/profile_images/638564112922882048/a0ZPWdgO.png",
      "twitter_name": "mhidaka",
      "github_name": "mhidaka"
    },
    "stime": "2016-02-19 13:00:00",
    "etime": "2016-02-19 13:50:00",
    "category": {
      "id": 4,
      "name": "하드웨어"
    },
    "place": {
      "id": 4,
      "name": "Room C"
    },
    "language_id": "ja",
    "slide_url": "https://speakerdeck.com/player/128612dc41bd48798330d6053fbde247",
    "movie_url": "",
    "share_url": "https://droidkaigi.github.io/2016/timetable.html#session-2016-02-19-13-00-13-50-c"
  },
  {
    "id": 31,
    "title": "Loving Lean Layouts",
    "description": "XML layouts are a fundamental part of Android development at all levels. Getting started is straightforward but creating efficient layouts while still achieving the desired UI takes some practice and a few tricks.\n\nIn this session we will look at creating lean yet lovely layouts and\ndiscuss why efficient layouts matter to both developers and users, look at use cases and best practices for standard layouts, determine when a \ncustom view is a good choice, review common mistakes and misconceptions, and share some tricks and situational techniques.",
    "speaker": {
      "id": 31,
      "name": "Huyen Tue Dao (Queen Code Monkey)",
      "image_url": "https://pbs.twimg.com/profile_images/1774774856/Avatar_DragonCon_300x300.jpg",
      "twitter_name": "queencodemonkey",
      "github_name": "queencodemonkey"
    },
    "stime": "2016-02-19 13:00:00",
    "etime": "2016-02-19 13:50:00",
    "category": {
      "id": 5,
      "name": "플랫폼"
    },
    "place": {
      "id": 5,
      "name": "Room D"
    },
    "language_id": "en",
    "slide_url": "https://speakerdeck.com/player/63a22ceda2264f728fc74500ae431ec3",
    "movie_url": "",
    "share_url": "https://droidkaigi.github.io/2016/timetable.html#session-2016-02-19-13-00-13-50-d"
  },
  {
    "id": 32,
    "title": "Support Library 총 복습",
    "description": "[개요]\n공식 사이트에 따르면 2011년 3월에 첫 번째 SupportLibrary Revision 1이 출시되고 2015년 11월 현재 Revision 23.1.1까지 업데이트됐습니다. 처음에는 v4라는 하나의 라이브러리에서 시작했지만, 지금은 v7과 Design 등 다양한 SupportLibrary가 존재하며, 그 수는 점점 늘어나고 있습니다.\n이 세션은 어떤 SupportLibrary가 있고, 어떤 기능이 실현 가능한가를 설명하고 SupportLibrary를 구사하기위한 도움이되는 내용입니다.\n\n[대상자]\nAndroid 어플 개발 초급 ~ 중급\n\n[내용 후보]\n- 전체 SupportLibrary에서 제공하는 기능의 설명\n- 주요 기능의 동작 데모",
    "speaker": {
      "id": 32,
      "name": "Takahiro Shimokawa",
      "image_url": "https://pbs.twimg.com/profile_images/512589372013547521/BDOLFGH_.jpeg",
      "twitter_name": "androhi",
      "github_name": "androhi"
    },
    "stime": "2016-02-19 14:00:00",
    "etime": "2016-02-19 14:50:00",
    "category": {
      "id": 7,
      "name": "유지 보수"
    },
    "place": {
      "id": 2,
      "name": "Room A"
    },
    "language_id": "ja",
    "slide_url": "https://speakerdeck.com/player/c4201091a99549ee81aff6025596fbca",
    "movie_url": "",
    "share_url": "https://droidkaigi.github.io/2016/timetable.html#session-2016-02-19-14-00-14-50-a"
  },
  {
    "id": 33,
    "title": "Advanced Kotlin for Android",
    "description": "■ 개요\n지금 세계적으로 주목을 받는 프로그래밍 언어 'Kotlin' 으로 Android 개발에 대해 이야기합니다.\n\n■ 대상자\n· Kotlin을 사용하기 시작한 엔지니어\n· Kotlin를 사용해보고 싶은 엔지니어 (후반은 다소 어려움)\n\n■ Agenda\n1. Kotlin이란\n2. Android 프로젝트에서 Kotlin 사용\n3. Real world Android Kotlin\n4. 공격적인 Kotlin\n\n■ 강연자에 대해\n· Kotlin 책임자 (비공식)\n일본 Kotlin 사용자 그룹 대표",
    "speaker": {
      "id": 33,
      "name": "Taro Nagasawa",
      "image_url": "https://pbs.twimg.com/profile_images/680403940345790464/6-lApHa9.png",
      "twitter_name": "ngsw_taro",
      "github_name": "ntaro"
    },
    "stime": "2016-02-19 14:00:00",
    "etime": "2016-02-19 14:50:00",
    "category": {
      "id": 6,
      "name": "개발 환경 ・ 도구"
    },
    "place": {
      "id": 3,
      "name": "Room B"
    },
    "language_id": "ja",
    "slide_url": "https://speakerdeck.com/player/0f3f017ef45847a18a8ed2ae2c06d306",
    "movie_url": "",
    "share_url": "https://droidkaigi.github.io/2016/timetable.html#session-2016-02-19-14-00-14-50-b"
  },
  {
    "id": 34,
    "title": "17개국의 다국어 대응 Tips",
    "description": "17개국 언어를 대응하고 있는 Taptrip라는 어플을 만들고 있습니다.\n다국어 대응으로 확실히 해두어야 하는 포인트와 현장의 개발 흐름에 대해 이야기합니다.\n\n다국어 대응이라면 strings.xml과 RTL의 대응은 비교적 알려졌지만, 실제로 대응하게 되면 그 밖에도 조심해야 할 포인트가 많이 있습니다.\n예를 들어, 러시아어에 대응하면 문자의 길이가 일본어의 두 배 이상이므로 레이아웃에도 신경을 써야 합니다.\n또한 어플리케이션의의 번역을 아웃소싱하는 경우, 의뢰 방법이나 비용, 번역될 때까지의 시간 등 개발의 흐름도 생각해야합니다.\n\n지금까지 탐구해온 연구 결과를 공개함으로써 앞으로 여러분이 다국어를 할 때 도움이되면 좋겠다고 생각합니다.\n\n\n[대상자]\n다국어 대응 하고 싶은 사람\n\n[내용 제안]\n· strings.xml (관리 방법, 복수의 대응)\n· RTL 지원 (할지 여부 개발 우선순위 등 포함)\n· 언어마다 조심 디자인의 포인트\n· 번역 의뢰의 흐름",
    "speaker": {
      "id": 21,
      "name": "konifar",
      "image_url": "https://pbs.twimg.com/profile_images/619379391588511744/V4RrXbvM.jpg",
      "twitter_name": "konifar",
      "github_name": "konifar"
    },
    "stime": "2016-02-19 14:00:00",
    "etime": "2016-02-19 14:50:00",
    "category": {
      "id": 7,
      "name": "유지 보수"
    },
    "place": {
      "id": 4,
      "name": "Room C"
    },
    "language_id": "ja",
    "slide_url": "https://speakerdeck.com/player/b734d74df6d44ae889650f5873c6d03a",
    "movie_url": "",
    "share_url": "https://droidkaigi.github.io/2016/timetable.html#session-2016-02-19-14-00-14-50-c"
  },
  {
    "id": 35,
    "title": "Fearless Localization and Internationalization Across the Nations",
    "description": "Many people are intimidated by localization (l10n) and internationalization (i18n) but they don’t have to be—Android provides many tools out of the box to aide you in global domination. Learn what to watch out for while coding your app that will make your life easier once you receive localized content. We’ll cover alternate resources, strings files, date and number formatters, currency, and other tips from Android Studio, Google, and third parties that will turn you into an i18n and l10n champion.",
    "speaker": {
      "id": 34,
      "name": "Siena Aguayo",
      "image_url": "https://pbs.twimg.com/profile_images/673756215021727744/GhVWfsAQ.jpg",
      "twitter_name": "sienatime",
      "github_name": "sienaigg"
    },
    "stime": "2016-02-19 14:00:00",
    "etime": "2016-02-19 14:50:00",
    "category": {
      "id": 7,
      "name": "유지 보수"
    },
    "place": {
      "id": 5,
      "name": "Room D"
    },
    "language_id": "en",
    "slide_url": "https://www.slideshare.net/slideshow/embed_code/key/r5Ma9ancrDT62k",
    "movie_url": "",
    "share_url": "https://droidkaigi.github.io/2016/timetable.html#session-2016-02-19-14-00-14-50-d"
  },
  {
    "id": 36,
    "title": "라이브 코딩 ・ Android 라이브러리를 만들어 보자",
    "description": "[대상]\nAndroid 개발은 하고 있지만 라이브러리는 만든 적이 없는 사람, 앞으로 라이브러리를 만들어보려고 생각하는 사람\n\n[개요]\n평소 Android 개발은 하고 있지만 라이브러리를 만든 경험이 있는 분은 많지 않다고 생각합니다. 본 세션에서는 라이브러리를 만드는 방법을 설명하면서 라이브러리를 실제로 여러분들 앞에서 만들고 Maven Central Repository에 라이브러리를 등록하고 그것을 사용하는 것까지를 설명하면서 실제로 손을 움직이면서 진행하려고 합니다.\n\n또한 간단한 샘플 어플을 만들고, 그 어플에서 라이브러리로 꺼내서 공개하는 형태로 설명합니다.\n이것으로 평소 여러분이 작성하는 멋진 어플에서 추상화할 수 있는 부분을 잘라 라이브러리화하는 것으로 멋진 라이브러리가 지금 이상으로 늘어나길 바랍니다.\n\n[발표 내용]\n다음과 같은 라이브 코딩과 설명을 실시합니다.\n\n- 간단한 샘플 어플 만들기\n- 샘플 어플에서 라이브러리를 자르기\n- 테스트 만들기\n- 만든 라이브러리를 Maven Central Repository에 등록\n- 다른 어플에서 해당 라이브러리를 사용\n\n※ 라이브 코딩 중 만일의 문제에 대비하여 대충의 흐름을 소개하는 슬라이드는 만들어두고, 네트워크 문제 · PC 문제에 닥쳤을 때에도 문제없게 준비하겠습니다.",
    "speaker": {
      "id": 35,
      "name": "Masataka Kono(@mapyo)",
      "image_url": "https://pbs.twimg.com/profile_images/1354553482/4507067_141002367.JPG",
      "twitter_name": "mapyo",
      "github_name": "mapyo"
    },
    "stime": "2016-02-19 15:10:00",
    "etime": "2016-02-19 15:40:00",
    "category": {
      "id": 7,
      "name": "유지 보수"
    },
    "place": {
      "id": 2,
      "name": "Room A"
    },
    "language_id": "ja",
    "slide_url": "https://www.slideshare.net/slideshow/embed_code/key/N5KMx4rno59FnB",
    "movie_url": "",
    "share_url": "https://droidkaigi.github.io/2016/timetable.html#session-2016-02-19-15-10-15-40-a"
  },
  {
    "id": 37,
    "title": "Android 실제 제품에 Kotlin의 도입 사례",
    "description": "· 개요\nAndroid 개발에 있어서 Kotlin 언어는 주목도가 매우 높아지고 있다고 생각합니다만, 실제 제품에서 사용되고 있는 실적은 아직 그다지 많지 않은 것은 아닐까 생각합니다. 그래서 Sansan사에서 개발하고 있는 어플 Eight의 Android 버전의 개발 실적을 바탕으로 Kotlin의 실제 제품에 도입이라는 관점에서\n\n- 기존 Java 프로젝트에 Kotlin의 도입 과정\n- Java 코드와의 공존\n- 라이브러리의 사용 실적과 주의해야 할 점\n- Kotlin의 편리한 점\n- 프로젝트를 추진에 있어서 고생한 것\n- 도입 후의 장점\n\n같은 것에 대해 말씀 드리고자 합니다.\n\n· 대상자\n이미 Java에서 Android 어플리케이션의 개발 실적이 있고, Kotlin의 도입을 검토하고 있는 분\nKotlin이 어떤 것인지 관심이 있는 분",
    "speaker": {
      "id": 36,
      "name": "Jumpei Yamamoto",
      "image_url": "https://avatars3.githubusercontent.com/u/1436634?v=3&s=400.jpg",
      "twitter_name": "",
      "github_name": "yamamotoj"
    },
    "stime": "2016-02-19 15:10:00",
    "etime": "2016-02-19 15:40:00",
    "category": {
      "id": 6,
      "name": "개발 환경 ・ 도구"
    },
    "place": {
      "id": 3,
      "name": "Room B"
    },
    "language_id": "ja",
    "slide_url": "https://speakerdeck.com/player/690a62854be343358f5af0df4f7e054f",
    "movie_url": "",
    "share_url": "https://droidkaigi.github.io/2016/timetable.html#session-2016-02-19-15-10-15-40-b"
  },
  {
    "id": 38,
    "title": "What's the difference between JavaScript and Java?",
    "description": "## 대상자\n* 어플리케이션 아키텍처 ・ 프레임워크에 고민하는 Android 개발 중상급자\n* Web 프론트엔드 환경에서 Android로 이직한 기술자\n\n## 개요\nJavaScript과 Java의 차이를 의식하면서 Web 프론트엔드 JavaScript에서 유행하고 있는 아키텍처와 문화를 Android에 가져오는 이야기를 합니다.\n\n'프론트엔드 JavaScript'와 'Android Java', 이것들은 전혀 별개의 것입니다만 '사용자로부터의 상호 작용을 다루다' 이라는 목표는 같습니다. Android 개발자 입장에서 말하면 'Web 프론트엔드는 지금의 유행이 내년에는 시들어져서 무섭다...' 라고 여겨지기 쉽지만, 반대로 말하면 그만큼의 속도로 기술 · 환경이 진화하고 있다는 의미이기도합니다.\n\nAndroid에도 Data Binding이 공식적으로 제공되기 시작했습니다. 이것은 Web에서도 널리 사용되고 있는 기술이지만, 마침내 Android에 도입되었습니다.\n이처럼 서로의 차이를 의식하면서 엄청나게 빠른 진화를 계속하는 프론트엔드 JavaScript의 유행을 도입함으로써 뭔가 새로운 발견이 있지 않을까라는 이야기를합니다.\n\n또한 Redux를 Android 환경에 들여온 Droidux라는 라이브러리의 구현하면서 얻은 내용으로, JavaScript 등 다른 환경의 라이브러리 등을 Android Java에 도입 시 의식하지 않으면 안되고, 언어 간의 차이에서 오는 구현 정책의 차이 등에 대해에서도 논의할 수 있으면 좋겠다고 생각합니다.\n\n(※ 어디 까지나 Android 메인이므로 JavaScript는 간단하게만 다룹니다)\n\n## 내용\n### 이야기할 것\n* 프론트엔드 JavaScript에서 유행하는 아키텍처\n* Android Java와 Web 프론트엔드 JavaScript와의 차이\n* Flux, Redux : Application architecture JavaScript\n* Flux, Redux for Android\n* returns`rx.Observable<T>`라이브러리\n*`rx.Observable<T>`통일 이론\n* Annotation Processing에 따른 Code generation\n* Data Binding\n* RxJava\n\n### 언급하지 않는 것\n* Web의 세세한 이야기​​\n* JavaScript 라이브러리에 대한 상세내용\n* JavaScript UI 구성 요소 컴포넌트 라이브러리 (React 라든지)\n* Android의 UI 라이브러리",
    "speaker": {
      "id": 37,
      "name": "Masayuki IZUMI (@izumin5210)",
      "image_url": "https://pbs.twimg.com/profile_images/414065206210220032/bJezBEvM.jpeg",
      "twitter_name": "izumin5210",
      "github_name": "izumin5210"
    },
    "stime": "2016-02-19 15:10:00",
    "etime": "2016-02-19 15:40:00",
    "category": {
      "id": 8,
      "name": "Android의 최신 동향"
    },
    "place": {
      "id": 4,
      "name": "Room C"
    },
    "language_id": "ja",
    "slide_url": "https://speakerdeck.com/player/45c463463fbe47518576240a53622cdc",
    "movie_url": "",
    "share_url": "https://droidkaigi.github.io/2016/timetable.html#session-2016-02-19-15-10-15-40-c"
  },
  {
    "id": 39,
    "title": "Android,Brillo,ChromeOS",
    "description": "[개요]\n2013년에 Andy Rubin이 Sundar Pichai의 Android 개발 총괄자로 바뀌었습니다.\n그 후 종종 Android 및 ChromeOS의 통합에 대해 보도되고 있습니다.\n실제 Android에 포함된 ChromeOS의 기능이 있고, 또한 11월에 갑자기 개발  중인 소스가 공개된 IoT위한 OS, Brillo는 Android 및 ChromeOS 하이브리드이라고도 말할 수 있는 것이 되었습니다.\n\nAndroid, ChromeOS (ChromiumOS) Brillo의 기능을 비교하고 미래에 Android에 ChromeOS의 기능이 어떻게 통합되어갈지 망상 기반으로 이야기합니다.\n\n[발표 예정 내용]\n· Android에 포함된 ChromeOS 기능\n· Brillo의 구조\n· Android 및 ChromeOS, Brillo 구성의 비교\n\n[대상자]\n· Android 와 ChromeOS의 통합은 어떻게 되어있는거야, 그리고 관심을 가지고 계신 분.",
    "speaker": {
      "id": 38,
      "name": "l_b__",
      "image_url": "https://pbs.twimg.com/profile_images/481176364/Google_Prof_Holmes2.jpg",
      "twitter_name": "l_b__",
      "github_name": ""
    },
    "stime": "2016-02-19 15:10:00",
    "etime": "2016-02-19 15:40:00",
    "category": {
      "id": 5,
      "name": "플랫폼"
    },
    "place": {
      "id": 5,
      "name": "Room D"
    },
    "language_id": "ja",
    "slide_url": "https://www.slideshare.net/slideshow/embed_code/key/yaq1d2WI0gmJso",
    "movie_url": "",
    "share_url": "https://droidkaigi.github.io/2016/timetable.html#session-2016-02-19-15-10-15-40-d"
  },
  {
    "id": 40,
    "title": "Android CI: 2016 edition",
    "description": "대상자 :\nAndroid의 테스트에 관심이 있는 개발 중급자\n\n개요 :\nAndroid는 OS뿐만 아니라 Android 어플리케이션의 테스트도 매년 상황이 변화하고 있습니다.\n예전에는 만든 어플의 테스트라고 말하면, 실제 단말을 꺼내 설치하고 조작하는 것을 가리켰습니다. 또는 InstrumentationTestCase, uiautomator, Robotium 같은 자동화 도구를 사용해 테스트 스크립트를 써봤을지도 모릅니다.\n그러나 그 방법으로는 어플 자체가 복잡화 · 대규모화되고, 게다가 빠른 개발이 요구되는 상황에 대응하는 것은 어려울 것입니다. 이 어려움이 현저하게 나타나는 것은 테스트 코드의 유지 보수이며, 정기적으로 테스트를 실행하지 않으면 테스트 코드가 구현과의 괴리 상태가 되어버려, 유지 보수의 번거로움이 테스트까지 영향을 끼치게 됩니다.\n테스트를 항상 최신 상태로 유지하기 위해 개발팀의 문화 만들기는 물론이고, 최신 어플과 테스트 사이에 괴리가 발생했을 때 경고를 표시하는 구조가 필수적입니다. 이 방법이야말로 CI (Continuous Integration)라로 불리는 것입니다만, 지금까지 Android의 CI는 다양한 기술적 제약으로 병목되어, 전반적인 CI를 실현하려면 복잡한 설정이나 처음부터 테스트 ・ CI를 예측한 설계가 요구되고 있었습니다.\n그 상황이 Gradle Android Plugin의 버전업이나 각종 테스트 도구의 진화에 따라 바뀌고 있습니다. 기존의 어플에서도 도입되어 소규모 테스트부터 시작할 수 있는 환경이 갖추어지고 있습니다.\n그래서 Android의 테스트에 대해서, 전체 그림이나 관련 단어를 레이어로 분류하고 알기 쉽게 살펴본 후 각 레이어의 테스트 설계와 최신 CI의 실현 방법을 실제 예를 들어 설명합니다.",
    "speaker": {
      "id": 39,
      "name": "Yusuke Yagyu",
      "image_url": "https://avatars2.githubusercontent.com/u/1888328?v=3&s=400.jpg",
      "twitter_name": "",
      "github_name": "gyugyu"
    },
    "stime": "2016-02-19 15:50:00",
    "etime": "2016-02-19 16:20:00",
    "category": {
      "id": 7,
      "name": "유지 보수"
    },
    "place": {
      "id": 2,
      "name": "Room A"
    },
    "language_id": "ja",
    "slide_url": "https://speakerdeck.com/player/6e57ee81c3e249578556a89c0fe11005",
    "movie_url": "",
    "share_url": "https://droidkaigi.github.io/2016/timetable.html#session-2016-02-19-15-50-16-20-a"
  },
  {
    "id": 41,
    "title": "Android 엔지니어가되어 2년간의 공부",
    "description": "대상자 :\n- 앞으로 Android 어플리케이션 개발을 시작하려는 사람\n- Android 애플리케이션 개발을 시작한지 얼마 안된 사람\n\n설명 :\nDroidKaigi 2016이 개최될 무렵에는 Android 엔지니어로 2년째가 끝납니다.\n0에서 Android 어플리케이션 개발 기술을 배워나가는데 있어서, 어떻게 배워왔는지\n어떤 실패를 했는지 등을 공유하고 싶습니다.\n\n또한 혼자서 개발하는 것과 팀에서 개발을 할 경우의 차이점과 주의 사항도 공유하고 싶습니다.\n아직 원숙한 Android 엔지니어는 아니지만, 지금이야말로 되돌아보고\n앞으로 한 걸음 도움이 될지도 모르는, 좋은 점 나쁜 점을\n여러분에게 전달할 수 있습니다.",
    "speaker": {
      "id": 40,
      "name": "Ryutaro Miyashita",
      "image_url": "https://pbs.twimg.com/profile_images/625336726655897600/3XGY2KW0.jpg",
      "twitter_name": "ryugoo_",
      "github_name": "ryugoo"
    },
    "stime": "2016-02-19 15:50:00",
    "etime": "2016-02-19 16:20:00",
    "category": {
      "id": 2,
      "name": "기타"
    },
    "place": {
      "id": 3,
      "name": "Room B"
    },
    "language_id": "ja",
    "slide_url": "https://speakerdeck.com/player/bd0d9434f0e14e27b3fb7c669c548039",
    "movie_url": "",
    "share_url": "https://droidkaigi.github.io/2016/timetable.html#session-2016-02-19-15-50-16-20-b"
  },
  {
    "id": 42,
    "title": "Build your custom Rx Observable/Operator",
    "description": "1. 개요\n최근 1년 동안 RxJava과 RxAndroid의 보급이 진행되고 있지만, 제공되는 Observable 및 Operator를 사용에 비해, 커스터마이징 Observable 및 Operator를 만드는 장애물은 여전히 높다. 또한 원래 자신의 제공하려는 기능을 어떻게 RxJava로 표시하면 좋은 것인지,에 대해서도 고려가 필요하다.\n\n이 이야기는 필자가 작성한 Nearby API용 RxJava 라이브러리 RxNearby (https://github.com/hkurokawa/RxNearby)를 예로 어떻게 하고 싶은 처리를 RxJava로 구현시킬지, 커스텀 Observable이나 Subscriber를 만들 때 무엇에 주의해야 하는지에 대해 설명한다. 특히 1) RxJava의 Observable 및 Operator의 동작은 Subscriber를 중심으로 파악하는 것으로 이해하기 쉬워진다 2) subscribe과 event emission시 어떤 순서로 처리가 전해져갈지 파악하는 것은 라이브러리를 만들기에 있에서 중요하다.\n\n2 대상자\n- RxJava 경험자\n- Rx의 개념을 이해하고 상세에 관심이있는 사람\n\n3 목차\n- Observable 및 Operator 설명\n- Nearby API 설명과 RxJava에서 어떻게 처리할지의 아이디어\n- MessageSubscribeOnSubscribe의 설명과 그것을 통한 커스텀 Observable을 만드는데 있어서의 주의 사항\n- MessagePublishOperator의 설명과 그것을 통한 커스텀 Operator를 만드는데 있어서 주의 사항",
    "speaker": {
      "id": 41,
      "name": "hydrakecat",
      "image_url": "https://pbs.twimg.com/profile_images/86722804/cat.jpg",
      "twitter_name": "hydrakecat",
      "github_name": "hkurokawa"
    },
    "stime": "2016-02-19 15:50:00",
    "etime": "2016-02-19 16:20:00",
    "category": {
      "id": 8,
      "name": "Android의 최신 동향"
    },
    "place": {
      "id": 5,
      "name": "Room D"
    },
    "language_id": "ja",
    "slide_url": "https://speakerdeck.com/player/4d8020596e924f6a9b0afbfc3ec45ded",
    "movie_url": "",
    "share_url": "https://droidkaigi.github.io/2016/timetable.html#session-2016-02-19-15-50-16-20-d"
  },
  {
    "id": 43,
    "title": "5년 연속 'Hatena 북마크' 어플을 계속 개발하는 기술",
    "description": "대상자 : 모든 Android 앱 개발자; 특히 1년 이상 전에 만들어진 Android 어플리케이션를 여러 사람이 함께한 개발에 참여한 사람\n\nAndroid 어플 개발 · 운용을 길게 계속해 나가기 위한 기술이나 오랫동안 개발을 계속하면서 만나는 문제의 해결 방법에 대해서, 2011년 2월에 첫 번째 버전을 릴리스 한 「Hatena 북마크」Android 어플리케이션의 개발을 예로 이야기합니다.\n\n첫째, 지속적인 개발 · 출시에 빼놓을 수 없는 CI에 대해서, 사내에서 사용하고 있는 Jenkins에서 자동 빌드 및 테스트 자동화, 팀 내 릴리즈 구조와 GitHub Enterprise와의 제휴에 대해 설명합니다. 단순히 방법을 설명하는 것이 아니라 빌드 시스템인 Gradle의 활용에 중점을 두고 이야기하므로 Jenkins와 GitHub Enterprise를 사용하지않는 현장에서도 도움이 될 것입니다.\n\n또한 팀에서 개발자 간의 연계함에 있어서 고안한 것을 소개합니다. 예를 들어, 빌드 시스템 production flavor으로 preview 버전을 정의하고 작은 기능 개선과 큰 기능 추가 · 리팩토링을 팀에서 동시에 진행하면서 브런치간의 충돌의 발생을 작게 하는 코딩 시의 고안에 대해서, 리팩토링과 기능의 추가 코드 리뷰 요청을 명확하게 나누는 등의 개발 흐름상의 고민에 대해서 이야기합니다. Android 어플리케이션 개발에 관계없는 이야기도 나오지만 오래 애플리케이션을 개발하고 리팩토링 등도 많이 있으므로 이런 이야기도 중요합니다.\n\n마지막으로, 기능의 추가와 동작의 변화를 쉽게하기 위한 설계에 대해서 그것을 실제로 구현한 모듈의 소개, 오래된 라이브러리이나 비추천이 된 API를 차츰 대체해 나가는 방법 등 오래된 코드를 다시 작성할 때나 오래 사용할 코드를 작성할 때 실제로 실천하는 방법을 소개합니다.",
    "speaker": {
      "id": 42,
      "name": "Yuya Nobuoka (@nobuoka)",
      "image_url": "https://pbs.twimg.com/profile_images/692368341894193152/jEFTbQWK.jpg",
      "twitter_name": "nobuoka",
      "github_name": "nobuoka"
    },
    "stime": "2016-02-19 16:30:00",
    "etime": "2016-02-19 17:00:00",
    "category": {
      "id": 7,
      "name": "유지 보수"
    },
    "place": {
      "id": 2,
      "name": "Room A"
    },
    "language_id": "ja",
    "slide_url": "https://www.slideshare.net/slideshow/embed_code/key/1PvaMNasau7wtm",
    "movie_url": "",
    "share_url": "https://droidkaigi.github.io/2016/timetable.html#session-2016-02-19-16-30-17-00-a"
  },
  {
    "id": 44,
    "title": "Fireside chat",
    "description": "[개요]\n긴급 기획! DroidKaigi official app 개발자들이 한자리에 모여 제작 비화에 대해 이야기합니다.\n절망적인 현장에서 일어난 기적이란... 기대하세요!",
    "speaker": {
      "id": 43,
      "name": "DroidKaigi developers",
      "image_url": "https://raw.githubusercontent.com/konifar/droidkaigi2016/master/app/src/main/res/mipmap-xxhdpi/ic_launcher.png",
      "twitter_name": "",
      "github_name": ""
    },
    "stime": "2016-02-19 16:30:00",
    "etime": "2016-02-19 17:00:00",
    "category": {
      "id": 2,
      "name": "기타"
    },
    "place": {
      "id": 3,
      "name": "Room B"
    },
    "language_id": "ja",
    "slide_url": "http://blog.nkzn.info/entry/2016/02/19/170321",
    "movie_url": "",
    "share_url": "https://droidkaigi.github.io/2016/timetable.html#session-2016-02-19-16-30-17-00-b"
  },
  {
    "id": 45,
    "title": "Chrome과 Android의 과거 · 현재 · 미래",
    "description": "개요 :\nChrome과 Andorid는 서로에 새 버전이 나올 때마다 서로 친화력이 높아지고 있습니다.\nWeb 콘텐츠 및 Android 어플리케이션 모두를 제작하는 경우, Chrome for Android (Android 용 Chrome) 라는 Web과 어플을 연결하는데 매우 중요한 역할을 하고 있습니다.\n앞으로 더욱 Chrome과 Android의 관계는 중요하게 될 것으로 생각합니다.\n\n이 세션에서는 Chrome을 활용한 Android 어플리케이션 개발에 대해 이야기합니다.\n먼저 Chrome for Android의 개요, Android의 WebView의 변화 등을 말합니다.\n다음으로 Chrome의 기술 중에서도 특히 Android 어플리케이션에 활용가능 한 기능 등을 말합니다.\n마지막으로 Chrome과 Android의 미래에 대해서, 흥미로운 움직임 · 사고에 대해 이야기합니다.\n\n내용 :\n* Chrome for Android 종류\n* WebView의 변화\n* Chrome Custom Tabs\n* Web App Manifest\n* Service Workers와 Push Notifications\n* App Stream ※ 1\n* Progressive Web Apps\n* Chrome과 Android의 미래에 대해 (개인적인 주관)\n\n\n대상자 :\n* Web 컨텐츠 및 Android 어플리케이션 모두를 운용하고 있는 회사 or 사람\n* Chrome과 Android의 친화력을 효과적으로 활용하고 싶은 사람\n* 어플리케이션내에서 WebView를 사용하고 있는 사람 or 사용하고 싶은 사람\n\n※ 1 참고 : http://insidesearch.blogspot.ca/2015/11/new-ways-to-find-and-stream-app-content.html",
    "speaker": {
      "id": 11,
      "name": "Shinobu Okano(@operandoOS)",
      "image_url": "https://pbs.twimg.com/profile_images/2769959234/6e50270293d9b3196223e64c467f3e53.jpeg",
      "twitter_name": "operandoOS",
      "github_name": "operando"
    },
    "stime": "2016-02-19 16:30:00",
    "etime": "2016-02-19 17:00:00",
    "category": {
      "id": 2,
      "name": "기타"
    },
    "place": {
      "id": 5,
      "name": "Room D"
    },
    "language_id": "ja",
    "slide_url": "https://www.slideshare.net/slideshow/embed_code/key/e1rpJBrnbN9Sg",
    "movie_url": "",
    "share_url": "https://droidkaigi.github.io/2016/timetable.html#session-2016-02-19-16-30-17-00-d"
  }
]
